using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using System.Linq;

class Program
{
    public class FileLocation
    {
        public string Name { get; set; }
        public int Start { get; set; }
        public int End { get; set; }
        public Location StartLoc { get; set; }
        public Location EndLoc { get; set; }
    }

    public class Location
    {
        public int Line { get; set; }
        public int Column { get; set; }
        public int Position { get; set; }
    }

    public class Duplicate
    {
        public string Format { get; set; }
        public int Lines { get; set; }
        public string Fragment { get; set; }
        public int Tokens { get; set; }
        public FileLocation FirstFile { get; set; }
        public FileLocation SecondFile { get; set; }
    }

    public class JsonData
    {
        public List<Duplicate> Duplicates { get; set; }
    }

    static void Main(string[] args)
    {
        string filePath = "output.txt";  // Specify your output file path

        // Open or create the file to write the output
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            // Redirect Console output to file
            Console.SetOut(writer);

            // Load and process the JSON file
            string jsonFilePath = "path_to_your_json_file.json";  // Specify your JSON file path here
            var jsonData = ReadJsonFile(jsonFilePath);
            Console.WriteLine("Processing duplicates...");

            // Process duplicates in parallel
            var (reusableComponents, falsePositives) = ProcessDuplicates(jsonData.Duplicates);

            // Display detailed results
            DisplayResults("Found Reusable Components", reusableComponents);
            DisplayResults("Detected False Positives", falsePositives);

            // Display the counts
            Console.WriteLine($"\nTotal Reusable Components Found: {reusableComponents.Count}");
            Console.WriteLine($"Total False Positives Found: {falsePositives.Count}");

            // Inform the user that the output has been written to the file
            Console.WriteLine($"\nResults written to {filePath}");
        }

        // Optionally, open the file after processing is done
        System.Diagnostics.Process.Start("notepad.exe", filePath);
    }

    static JsonData ReadJsonFile(string filePath)
    {
        string jsonContent = File.ReadAllText(filePath);
        return JsonConvert.DeserializeObject<JsonData>(jsonContent);
    }

    // Efficiently processes duplicates
    static (List<Duplicate>, List<Duplicate>) ProcessDuplicates(List<Duplicate> duplicates)
    {
        var reusableComponents = new List<Duplicate>();
        var falsePositives = new List<Duplicate>();

        foreach (var duplication in duplicates)
        {
            // Identify reusable components (cross-file fragments)
            if (duplication.FirstFile?.Name != duplication.SecondFile?.Name)
            {
                reusableComponents.Add(duplication);
            }

            // Detect false positives (e.g., comment-only fragments or "global using")
            if (IsFalsePositive(duplication.Fragment))
            {
                falsePositives.Add(duplication);
            }
        }

        return (reusableComponents, falsePositives);
    }

    // Checks if the fragment is a false positive (e.g., comment-based or "global using")
       // Checks if the fragment is a false positive
    static bool IsFalsePositive(string fragment)
    {
        if (string.IsNullOrWhiteSpace(fragment))
            return false;

        // Patterns for false positives
        string[] falsePositivePatterns = new[]
        {
            "global using",             // Global using directives
            "//",                       // Comment lines
            "#include",                 // Include directives (for other languages)
            "using",                    // General using directive
            "Mock<",                    // Mocking framework usage
            "TestClass",                // Unit test class marker
            "UnitTest",                 // Unit test paths or files
            "Assert.",                  // Assertions in unit tests
            "namespace ",               // Namespaces
            "public class",             // Class declarations
            "private", "protected",     // Common keywords in code fragments
            "Generated by",             // Auto-generated files
        };

        // Additional checks for file names that indicate tests
        string[] testFileIndicators = new[]
        {
            "UnitTest", "Test", "HandlerTest", "ControllerTest", "ServiceTest"
        };

        // Check if the fragment contains any pattern
        if (falsePositivePatterns.Any(pattern => fragment.Contains(pattern, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }

        // Check if file paths contain unit test indicators
        if (testFileIndicators.Any(indicator => fragment.Contains(indicator, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }

        return false;
    }


    // Display detailed results for Reusable Components & False Positives
    static void DisplayResults(string title, List<Duplicate> result)
    {
        Console.WriteLine($"\n{title}:");
        int count = 1;
        foreach (var item in result)
        {
            if (item.Fragment != null)
            {
                Console.WriteLine($"\n--- {title.Split(' ')[1]} {count++}:");
                Console.WriteLine($"Fragment: {item.Fragment}");
                Console.WriteLine($"First File: {item.FirstFile?.Name}");
                Console.WriteLine($"Second File: {item.SecondFile?.Name}");

                if (title == "Detected False Positives")
                {
                    Console.WriteLine("This is a comment-based or 'global using' fragment (false positive).");
                }
                Console.WriteLine();
            }
        }
    }
}

